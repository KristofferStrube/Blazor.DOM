@page "/"
@inject IJSRuntime JSRuntime

<PageTitle>Blazor.DOM - Listen for Events</PageTitle>

<h1>Listen for Events</h1>

<p>
    On this page we use JSInterop to get a JS reference to the below textarea and constructs an <code>EventTarget</code> from it and add event listeners for pointer events (<code>pointerdown</code>, <code>pointermove</code>, <code>pointerup</code>, and <code>pointerleave</code>).
    We get a strongly typed <code>Event</code> back which we check for its type.
</p>

<textarea @ref="TextAreaRef" style="height:20vh;width:100%;">Try moving your pointer over this area or click it slowly.</textarea>
<br />
@if (type != string.Empty)
{
    <span>The type was: <code>@type</code></span>
}

@code {
    ElementReference TextAreaRef;

    string type = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        var jSTextarea = await JSRuntime.InvokeAsync<IJSObjectReference>("jSReference", TextAreaRef);
        var target = EventTarget.Create(JSRuntime, jSTextarea);

        var callback = new EventListener(JSRuntime, async (e) =>
        {
            type = await e.GetTypeAsync();
            StateHasChanged();
        });

        await target.AddEventListenerAsync("pointerdown", callback);
        await target.AddEventListenerAsync("pointermove", callback);
        await target.AddEventListenerAsync("pointerup", callback);
        await target.AddEventListenerAsync("pointerleave", callback);
    }
}