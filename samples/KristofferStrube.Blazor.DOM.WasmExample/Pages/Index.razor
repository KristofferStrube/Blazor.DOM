@page "/"
@inject IJSRuntime JSRuntime

<PageTitle>Blazor.DOM - Listen for Events</PageTitle>

<h1>Listen for Events</h1>

<p>
    On this page we construct a <code>EventTarget</code> from a <code>ElementReference</code> and add event listeners for pointer events (<code>pointerdown</code>, <code>pointermove</code>, <code>pointerup</code>, and <code>pointerleave</code>).
    We get a strongly typed <code>Event</code> back when there is a callback which we check for its type and other event information.
    <br />
    We can likewise remove these event listeners and re-listen for them again. We have specifically chosen to <code>PreventDefaultAsync</code> if the event type was a <code>pointerdown</code>.
    <br />
    You can also invoke an event directly on the div without interacting with it as a user. In this case we see that the <code>pointerdown</code> is not prevented because we did not construct it to be cancelable.
</p>

<div style="margin-bottom:10px;display:flex;gap:10px;">
    @if (subscribed)
    {
        <button class="btn btn-warning" @onclick=UnsubscribeAsync>Unsubsribe</button>
    }
    else
    {
        <button class="btn btn-success" @onclick=SubscribeAsync>Subscribe</button>
    }
    <button class="btn btn-primary" @onclick=DispatchEvent>Dispatch Pointer Down Event</button>
</div>
<div @ref="DivRef" style="min-height:20vh;width:100%;border:solid 1px black;padding:5px;">
    <p>
        Try moving your pointer over this area or click it slowly.
    </p>
    @if (eventInProcess is not null)
    {
        <div>The type was: <code>@eventInProcess.Type</code></div>
        <div>The event phase was: <code>@eventInProcess.EventPhase</code></div>
        <div>It bubbles: <code>@eventInProcess.Bubbles</code></div>
        <div>It is cancelable: <code>@eventInProcess.Cancelable</code></div>
        <div>It is defaultPrevented: <code>@eventInProcess.DefaultPrevented</code></div>
        <div>It is composed: <code>@eventInProcess.Composed</code></div>
        <div>It is trusted: <code>@eventInProcess.IsTrusted</code></div>
        <div>It was made at : <code>@eventInProcess.TimeStamp</code></div>
    }
</div>

@code {
    ElementReference DivRef;
    EventListenerInProcess<EventInProcess, Event>? callback;
    bool subscribed = false;

    EventInProcess? eventInProcess;

    protected override async Task OnInitializedAsync()
    {
        callback = await EventListenerInProcess<EventInProcess, Event>.CreateAsync(JSRuntime, (e) =>
        {
            eventInProcess = e;
            if (e.Type is "pointerdown")
            {
                e.PreventDefault();
            }
            StateHasChanged();
        });
        await SubscribeAsync();
    }

    protected async Task SubscribeAsync()
    {
        // Sample of creating an in-process EventTarget.
        var divTarget = await EventTargetInProcess.CreateAsync(JSRuntime, DivRef);
        divTarget.AddEventListener("pointerdown", callback);
        divTarget.AddEventListener("pointermove", callback);
        divTarget.AddEventListener("pointerup", callback);
        divTarget.AddEventListener("pointerleave", callback);
        subscribed = true;
    }

    protected async Task UnsubscribeAsync()
    {
        // Sample of creating an an asynchronous EventTarget that can also be used in Blazor Server projects.
        var divTarget = await EventTarget.CreateAsync(JSRuntime, DivRef);
        await divTarget.RemoveEventListenerAsync("pointerdown", callback);
        await divTarget.RemoveEventListenerAsync("pointermove", callback);
        await divTarget.RemoveEventListenerAsync("pointerup", callback);
        await divTarget.RemoveEventListenerAsync("pointerleave", callback);
        subscribed = false;
        eventInProcess = null;
    }

    protected async Task DispatchEvent()
    {
        var divTarget = await EventTarget.CreateAsync(JSRuntime, DivRef);
        var eventInstance = await Event.CreateAsync(JSRuntime, "pointerdown", new() { Bubbles = true });
        await divTarget.DispatchEventAsync(eventInstance);
    }
}