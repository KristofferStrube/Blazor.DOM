@page "/"
@inject IJSRuntime JSRuntime

<PageTitle>Blazor.DOM - Listen for Events</PageTitle>

<h1>Listen for Events</h1>

<p>
    On this page we construct a <code>EventTarget</code> from a <code>ElementReference</code> and add event listeners for pointer events (<code>pointerdown</code>, <code>pointermove</code>, <code>pointerup</code>, and <code>pointerleave</code>).
    We get a strongly typed <code>Event</code> back when there is a callback which we check for its type and other event information.
    <br />
    We can likewise remove these event listeners and re-listen for them again. We have specifically chosen to <code>PreventDefaultAsync</code> if the event type was a <code>pointerdown</code>.
    <br />
    You can also invoke an event directly on the div without interacting with it as a user. In this case we see that the <code>pointerdown</code> is not prevented because we did not construct it to be cancelable.
</p>

<div style="margin-bottom:10px;display:flex;gap:10px;">
    @if (subscribed)
    {
        <button class="btn btn-warning" @onclick=UnsubscribeAsync>Unsubsribe</button>
    }
    else
    {
        <button class="btn btn-success" @onclick=SubscribeAsync>Subscribe</button>
    }
    <button class="btn btn-primary" @onclick=DispatchEvent>Dispatch Pointer Down Event</button>
</div>
<div @ref="DivRef" style="min-height:20vh;width:100%;border:solid 1px black;padding:5px;">
    <p>
        Try moving your pointer over this area or click it slowly.
    </p>
    @if (type != string.Empty)
    {
        <div>The type was: <code>@type</code></div>
        <div>The event phase was: <code>@eventPhase</code></div>
        <div>It bubbles: <code>@bubbles</code></div>
        <div>It is cancelable: <code>@cancelable</code></div>
        <div>It is defaultPrevented: <code>@defaultPrevented</code></div>
        <div>It is composed: <code>@composed</code></div>
        <div>It is trusted: <code>@isTrusted</code></div>
        <div>It was made at : <code>@timeStamp</code></div>
    }
</div>

@code {
    ElementReference DivRef;
    EventListener? callback;
    bool subscribed = false;

    string type = string.Empty;
    string eventPhase = string.Empty;
    bool bubbles;
    bool cancelable;
    bool defaultPrevented;
    bool composed;
    bool isTrusted;
    double timeStamp;

    protected override async Task OnInitializedAsync()
    {
        callback = await EventListener.CreateAsync(JSRuntime, async (e) =>
        {
            type = await e.GetTypeAsync();
            if (type is "pointerdown")
            {
                await e.PreventDefaultAsync();
            }
            eventPhase = (await e.GetEventPhaseAsync()).ToString();
            bubbles = await e.GetBubblesAsync();
            cancelable = await e.GetCancelableAsync();
            defaultPrevented = await e.GetDefaultPreventedAsync();
            composed = await e.GetDefaultPreventedAsync();
            isTrusted = await e.GetIsTrustedAsync();
            timeStamp = await e.GetTimeStampAsync();
            StateHasChanged();
        });
        await SubscribeAsync();
    }

    protected async Task SubscribeAsync()
    {
        var divTarget = await EventTarget.CreateAsync(JSRuntime, DivRef);
        await divTarget.AddEventListenerAsync("pointerdown", callback);
        await divTarget.AddEventListenerAsync("pointermove", callback);
        await divTarget.AddEventListenerAsync("pointerup", callback);
        await divTarget.AddEventListenerAsync("pointerleave", callback);
        subscribed = true;
    }

    protected async Task UnsubscribeAsync()
    {
        var divTarget = await EventTarget.CreateAsync(JSRuntime, DivRef);
        await divTarget.RemoveEventListenerAsync("pointerdown", callback);
        await divTarget.RemoveEventListenerAsync("pointermove", callback);
        await divTarget.RemoveEventListenerAsync("pointerup", callback);
        await divTarget.RemoveEventListenerAsync("pointerleave", callback);
        subscribed = false;
        type = string.Empty;
    }

    protected async Task DispatchEvent()
    {
        var divTarget = await EventTarget.CreateAsync(JSRuntime, DivRef);
        var eventInstance = await Event.CreateAsync(JSRuntime, "pointerdown", new() { Bubbles = true });
        await divTarget.DispatchEventAsync(eventInstance);
    }
}