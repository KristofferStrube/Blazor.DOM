@page "/Aborting"
@using KristofferStrube.Blazor.DOM
@inject IJSRuntime JSRuntime

<PageTitle>Blazor.DOM - Aborting</PageTitle>

<h1>Aborting</h1>

<p>
    On this page you can invoke a JS function that never stops as it is an infinite loop.
    The infinite loop checks whether a <code>AbortSignal</code> parsed to it is aborted in each iteration.
    So when we want to stop the execution of the function we simply tell the <code>AbortController</code> that created the <code>AbortSignal</code> to abort.
</p>
<p style="font-size: 11px">
    On a PC you can see that the function is indead running by checking the console log where it logs <code>"tick"</code> every 100 ms.
</p>

@if (cts is null)
{
    <button class="btn btn-success" @onclick=RunNeverEndingFunction>Start invocation that doesn't stop</button>
}
else
{
    <button class="btn btn-warning" @onclick=Abort>Abort invocation</button>
}

@code {
    CancellationTokenSource? cts;

    private async Task RunNeverEndingFunction()
    {
        AbortController abortController = await AbortController.CreateAsync(JSRuntime);
        AbortSignal signal = await abortController.GetSignalAsync();

        cts = new();
        CancellationToken cancellationToken = cts.Token;
        cancellationToken.UnsafeRegister(async _ => await abortController.AbortAsync(), null);

        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("neverEndingFunction", cancellationToken, signal);
    }

    private void Abort()
    {
        cts!.Cancel();
        cts = null;
    }
}